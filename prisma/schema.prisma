// Prisma schema for PayPi

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PiUser {
  id            String    @id @default(uuid())
  piUid         String?   @unique
  username      String    @unique
  walletAddress String?
  createdAt     DateTime  @default(now())

  sessions      Session[]
  paycode       MerchantPaycode?
  batchTasks    BatchTransferTask[]
  redEnvelopes  RedEnvelope[] @relation("RedEnvelopeCreator")
  claimedEnvelopes RedEnvelope[] @relation("RedEnvelopeClaimer")
  merchantPayments MerchantPayment[]
  dividendPayments MerchantDividendPayment[]
}

model Session {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     String
  user       PiUser   @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model MerchantPaycode {
  id                String   @id @default(uuid())
  ownerUserId       String   @unique
  owner             PiUser   @relation(fields: [ownerUserId], references: [id], onDelete: Cascade)
  merchantUid       String   @default("") @db.VarChar(100)  // 商家的 Pi uid
  dividendPool      Decimal  @default(0) @db.Decimal(18, 6) // 当前分红池
  initialAmount     Decimal  @default(0) @db.Decimal(18, 6) // 初始注册金额
  registerPaymentId String?  // 注册时的 U2A 支付 ID
  registerTxid      String?  // 注册时的交易 ID
  
  // 保留旧字段以兼容，标记为可选
  piAddress         String?  @db.VarChar(56)
  startPi           Decimal? @db.Decimal(18, 6)
  
  payloadJson       String
  qrPngDataUrl      String
  createdAt         DateTime @default(now())
  
  payments          MerchantPayment[]
  dividendDistributions MerchantDividendDistribution[]
}

// 批量转账任务记录
model BatchTransferTask {
  id              String   @id @default(uuid())
  batchId         String   @unique  // 前端生成的 batchId
  userId          String?  // 发起转账的用户 ID
  user            PiUser?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  userPaymentId   String   // U2A 支付的 paymentId
  userTxid        String?  // U2A 支付的 txid
  totalAmount     Decimal  @db.Decimal(18, 6)
  recipientCount  Int
  status          String   @default("pending") // pending, processing, completed, failed
  metadata        String   @db.Text  // JSON 存储原始 recipients 数据
  createdAt       DateTime @default(now())
  completedAt     DateTime?
  
  a2uPayments     A2UPayment[]
  
  @@index([userId])
}

// A2U 支付记录
model A2UPayment {
  id              String   @id @default(uuid())
  batchTaskId     String
  batchTask       BatchTransferTask @relation(fields: [batchTaskId], references: [id], onDelete: Cascade)
  
  paymentId       String   @unique  // Pi Network 返回的 paymentId
  toAddress       String   @db.VarChar(56)
  recipientUid    String?  // 收款人的 Pi uid
  amount          Decimal  @db.Decimal(18, 6)
  memo            String
  
  txid            String?  // 提交到区块链后的 txid
  status          String   @default("created") // created, submitted, completed, failed
  errorMessage    String?  @db.Text
  
  createdAt       DateTime @default(now())
  submittedAt     DateTime?
  completedAt     DateTime?
  
  @@index([batchTaskId])
  @@index([status])
}

// 红包记录表
model RedEnvelope {
  id              String    @id @default(uuid())
  code            String    @unique  // 唯一口令（64位随机hex）
  creatorUserId   String
  creator         PiUser    @relation("RedEnvelopeCreator", fields: [creatorUserId], references: [id], onDelete: Cascade)
  
  // 金额信息
  amountPi        Decimal   @db.Decimal(18, 6)
  
  // U2A 支付信息（用户转给App）
  u2aPaymentId    String?   // Pi Network返回的paymentId
  u2aTxid         String?   // 区块链txid
  u2aStatus       String    @default("pending") // pending, completed, failed
  
  // A2U 支付信息（App转给领取者或退回创建者）
  a2uPaymentId    String?   @unique
  a2uTxid         String?
  a2uStatus       String    @default("none") // none, created, submitted, completed, failed
  
  // 领取信息
  claimedByUserId String?
  claimedBy       PiUser?   @relation("RedEnvelopeClaimer", fields: [claimedByUserId], references: [id], onDelete: SetNull)
  claimedByUid    String?   // 领取者的 Pi uid
  claimedAt       DateTime?
  
  // 时间控制
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  
  // 状态
  status          String    @default("pending") // pending, active, claimed, expired, refunded
  
  @@index([creatorUserId])
  @@index([code])
  @@index([status])
}

// 商家收款记录表
model MerchantPayment {
  id                String   @id @default(uuid())
  merchantPaycodeId String
  merchantPaycode   MerchantPaycode @relation(fields: [merchantPaycodeId], references: [id], onDelete: Cascade)
  
  // 付款人信息
  payerUserId       String?
  payer             PiUser?  @relation(fields: [payerUserId], references: [id], onDelete: SetNull)
  payerUid          String   // Pi uid
  
  // 金额信息
  totalAmount       Decimal  @db.Decimal(18, 6)  // 用户支付的总额（已扣 0.01）
  merchantAmount    Decimal  @db.Decimal(18, 6)  // 商家收到的 95%
  dividendAmount    Decimal  @db.Decimal(18, 6)  // 进入分红池的 5%
  
  // U2A 支付信息（用户转给 App）
  u2aPaymentId      String
  u2aTxid           String?
  
  // A2U 支付信息（App 转给商家）
  a2uPaymentId      String?  @unique
  a2uTxid           String?
  a2uStatus         String   @default("pending")  // pending, created, submitted, completed, failed
  a2uErrorMessage   String?  @db.Text
  
  createdAt         DateTime @default(now())
  completedAt       DateTime?
  
  @@index([merchantPaycodeId])
  @@index([payerUserId])
  @@index([payerUid])
}

// 商家分红分配记录表
model MerchantDividendDistribution {
  id                String   @id @default(uuid())
  merchantPaycodeId String
  merchantPaycode   MerchantPaycode @relation(fields: [merchantPaycodeId], references: [id], onDelete: Cascade)
  
  totalDividend     Decimal  @db.Decimal(18, 6)  // 本次分红总额
  recipientCount    Int                           // 收益人数量
  status            String   @default("pending")  // pending, processing, completed, partial_completed, failed
  
  createdAt         DateTime @default(now())
  completedAt       DateTime?
  
  payments          MerchantDividendPayment[]
  
  @@index([merchantPaycodeId])
}

// 单个用户的商家分红记录表
model MerchantDividendPayment {
  id                String   @id @default(uuid())
  distributionId    String
  distribution      MerchantDividendDistribution @relation(fields: [distributionId], references: [id], onDelete: Cascade)
  
  recipientUserId   String?
  recipient         PiUser?  @relation(fields: [recipientUserId], references: [id], onDelete: SetNull)
  recipientUid      String
  
  // 该用户的累计付款金额和占比
  totalPaidAmount   Decimal  @db.Decimal(18, 6)
  percentage        Decimal  @db.Decimal(5, 4)  // 占比（0-1）
  
  // 本次分红金额
  dividendAmount    Decimal  @db.Decimal(18, 6)
  
  // A2U 支付信息
  paymentId         String?  @unique
  txid              String?
  status            String   @default("created")  // created, submitted, completed, failed
  errorMessage      String?  @db.Text
  
  createdAt         DateTime @default(now())
  completedAt       DateTime?
  
  @@index([distributionId])
  @@index([recipientUid])
}


